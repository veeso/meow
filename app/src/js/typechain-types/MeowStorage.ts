/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MeowStorage {
  export type MeowStruct = {
    id: PromiseOrValue<BigNumberish>;
    text: PromiseOrValue<string>;
    hashtags: PromiseOrValue<string>[];
    epoch: PromiseOrValue<BigNumberish>;
  };

  export type MeowStructOutput = [BigNumber, string, string[], BigNumber] & {
    id: BigNumber;
    text: string;
    hashtags: string[];
    epoch: BigNumber;
  };
}

export interface MeowStorageInterface extends utils.Interface {
  functions: {
    "getMeowById(uint256)": FunctionFragment;
    "getMeowsByHashtag(string,uint256,uint256)": FunctionFragment;
    "getMeowsForProfile(uint256,uint256,uint256)": FunctionFragment;
    "ownerAddr()": FunctionFragment;
    "publish(string,string[],uint128)": FunctionFragment;
    "setManagerAddr(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMeowById"
      | "getMeowsByHashtag"
      | "getMeowsForProfile"
      | "ownerAddr"
      | "publish"
      | "setManagerAddr"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMeowById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeowsByHashtag",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeowsForProfile",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "ownerAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publish",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMeowById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeowsByHashtag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeowsForProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MeowPublished(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MeowPublished"): EventFragment;
}

export interface MeowPublishedEventObject {
  recipient: BigNumber;
  meowId: BigNumber;
}
export type MeowPublishedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MeowPublishedEventObject
>;

export type MeowPublishedEventFilter = TypedEventFilter<MeowPublishedEvent>;

export interface MeowStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeowStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMeowById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MeowStorage.MeowStructOutput]>;

    getMeowsByHashtag(
      _hashtag: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MeowStorage.MeowStructOutput[]]>;

    getMeowsForProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MeowStorage.MeowStructOutput[]]>;

    ownerAddr(overrides?: CallOverrides): Promise<[string]>;

    publish(
      _text: PromiseOrValue<string>,
      _hashtags: PromiseOrValue<string>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagerAddr(
      _managerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMeowById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MeowStorage.MeowStructOutput>;

  getMeowsByHashtag(
    _hashtag: PromiseOrValue<string>,
    _offset: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MeowStorage.MeowStructOutput[]>;

  getMeowsForProfile(
    _profileId: PromiseOrValue<BigNumberish>,
    _offset: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MeowStorage.MeowStructOutput[]>;

  ownerAddr(overrides?: CallOverrides): Promise<string>;

  publish(
    _text: PromiseOrValue<string>,
    _hashtags: PromiseOrValue<string>[],
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagerAddr(
    _managerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMeowById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MeowStorage.MeowStructOutput>;

    getMeowsByHashtag(
      _hashtag: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MeowStorage.MeowStructOutput[]>;

    getMeowsForProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MeowStorage.MeowStructOutput[]>;

    ownerAddr(overrides?: CallOverrides): Promise<string>;

    publish(
      _text: PromiseOrValue<string>,
      _hashtags: PromiseOrValue<string>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagerAddr(
      _managerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MeowPublished(uint256,uint256)"(
      recipient?: null,
      meowId?: null
    ): MeowPublishedEventFilter;
    MeowPublished(recipient?: null, meowId?: null): MeowPublishedEventFilter;
  };

  estimateGas: {
    getMeowById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeowsByHashtag(
      _hashtag: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeowsForProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    publish(
      _text: PromiseOrValue<string>,
      _hashtags: PromiseOrValue<string>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagerAddr(
      _managerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMeowById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeowsByHashtag(
      _hashtag: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeowsForProfile(
      _profileId: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publish(
      _text: PromiseOrValue<string>,
      _hashtags: PromiseOrValue<string>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagerAddr(
      _managerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
